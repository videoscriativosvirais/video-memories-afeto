
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";
import Stripe from "https://esm.sh/stripe@12.0.0?target=deno";

// Configura√ß√µes CORS
const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
  "Access-Control-Allow-Methods": "POST, OPTIONS",
};

serve(async (req) => {
  console.log("üîî Requisi√ß√£o create-payment recebida:", new Date().toISOString());
  console.log("üîî URL:", req.url);
  console.log("üîî M√©todo:", req.method);
  
  // Handle CORS preflight requests
  if (req.method === "OPTIONS") {
    console.log("üîî Requisi√ß√£o OPTIONS recebida - respondendo com CORS headers");
    return new Response(null, { headers: corsHeaders });
  }

  try {
    // Verificar configura√ß√µes
    const stripeSecretKey = Deno.env.get("STRIPE_SECRET_KEY") || "";
    const supabaseUrl = Deno.env.get("SUPABASE_URL") || "";
    const supabaseServiceKey = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY") || "";
    
    if (!stripeSecretKey) {
      console.error("‚ùå STRIPE_SECRET_KEY n√£o configurada");
      throw new Error("STRIPE_SECRET_KEY n√£o configurada");
    }
    
    if (!supabaseUrl || !supabaseServiceKey) {
      console.error("‚ùå Configura√ß√µes do Supabase incompletas");
      throw new Error("Configura√ß√µes do Supabase incompletas");
    }
    
    console.log("üîî Inicializando cliente Stripe");
    // Inicializar Stripe com a chave secreta
    const stripe = new Stripe(stripeSecretKey, {
      apiVersion: "2023-10-16",
    });

    console.log("üîî Inicializando cliente Supabase");
    // Inicializar cliente Supabase com a chave de servi√ßo para bypass de RLS
    const supabaseAdmin = createClient(
      supabaseUrl,
      supabaseServiceKey
    );

    // Extrair o token de autentica√ß√£o do cabe√ßalho
    const authHeader = req.headers.get("Authorization");
    if (!authHeader) {
      console.error("‚ùå Cabe√ßalho de autoriza√ß√£o n√£o fornecido");
      throw new Error("Cabe√ßalho de autoriza√ß√£o n√£o fornecido");
    }

    const token = authHeader.replace("Bearer ", "");
    console.log("üîî Token de autentica√ß√£o extra√≠do");
    
    // Obter o usu√°rio autenticado
    console.log("üîî Verificando autentica√ß√£o do usu√°rio");
    const { data: userData, error: userError } = await supabaseAdmin.auth.getUser(token);
    if (userError) {
      console.error("‚ùå Erro de autentica√ß√£o:", userError);
      throw new Error(`Erro de autentica√ß√£o: ${userError.message}`);
    }
    
    console.log("‚úÖ Usu√°rio autenticado:", userData.user.id);

    // Extrair dados da requisi√ß√£o
    const body = await req.json();
    const { memoryTitle, memoryId } = body;
    
    console.log("üîî Dados recebidos:", JSON.stringify(body));
    
    if (!memoryId) {
      console.error("‚ùå ID da mem√≥ria n√£o fornecido");
      throw new Error("ID da mem√≥ria √© obrigat√≥rio");
    }
    
    if (!memoryTitle) {
      console.error("‚ùå T√≠tulo da mem√≥ria n√£o fornecido");
      throw new Error("T√≠tulo da mem√≥ria √© obrigat√≥rio");
    }
    
    // Verificar se a mem√≥ria existe
    console.log("üîî Verificando se a mem√≥ria existe:", memoryId);
    const { data: memoryData, error: memoryError } = await supabaseAdmin
      .from('memories')
      .select('id, title, is_paid')
      .eq('id', memoryId)
      .maybeSingle();
      
    if (memoryError) {
      console.error("‚ùå Erro ao verificar mem√≥ria:", memoryError);
      throw new Error(`Erro ao verificar mem√≥ria: ${memoryError.message}`);
    }
    
    if (!memoryData) {
      console.error("‚ùå Mem√≥ria n√£o encontrada:", memoryId);
      throw new Error(`Mem√≥ria com ID ${memoryId} n√£o encontrada`);
    }
    
    if (memoryData.is_paid) {
      console.log("‚ö†Ô∏è Mem√≥ria j√° est√° marcada como paga:", memoryId);
      // Ainda permitimos o pagamento, mas logamos o aviso
    }
    
    console.log("üîî Criando sess√£o de checkout do Stripe");
    // Criar uma sess√£o de checkout do Stripe
    const origin = req.headers.get("origin") || "https://memoriasafetivas.com";
    const session = await stripe.checkout.sessions.create({
      payment_method_types: ["card"],
      line_items: [
        {
          price_data: {
            currency: "brl",
            product_data: {
              name: memoryTitle || "Mem√≥ria Afetiva",
              description: "Salvar permanentemente sua mem√≥ria afetiva",
            },
            unit_amount: 1990, // R$ 19,90 em centavos
          },
          quantity: 1,
        },
      ],
      mode: "payment",
      success_url: `${origin}/dashboard?success=true&memory_id=${memoryId}`,
      cancel_url: `${origin}/criar-memoria?step=6&canceled=true`,
      metadata: {
        user_id: userData.user.id,
        memory_title: memoryTitle,
        memory_id: memoryId
      }
    });
    
    console.log("‚úÖ Sess√£o de checkout criada:", session.id);
    console.log("üîî URL de sucesso:", `${origin}/dashboard?success=true&memory_id=${memoryId}`);
    console.log("üîî URL de cancelamento:", `${origin}/criar-memoria?step=6&canceled=true`);

    // Verificar se j√° existe uma compra pendente para esta mem√≥ria
    console.log("üîî Verificando compras existentes para a mem√≥ria:", memoryId);
    const { data: existingPurchase, error: purchaseCheckError } = await supabaseAdmin
      .from("purchases")
      .select("id, status")
      .eq("memory_title", memoryTitle)
      .eq("user_id", userData.user.id)
      .maybeSingle();
      
    if (purchaseCheckError) {
      console.error("‚ùå Erro ao verificar compras existentes:", purchaseCheckError);
    }
    
    if (existingPurchase) {
      console.log("üîî Compra existente encontrada:", existingPurchase);
      
      // Atualizar a compra existente com o novo session_id
      console.log("üîî Atualizando compra existente com novo session_id");
      const { error: updateError } = await supabaseAdmin
        .from("purchases")
        .update({
          stripe_session_id: session.id,
          status: "pendente",
          updated_at: new Date().toISOString()
        })
        .eq("id", existingPurchase.id);
        
      if (updateError) {
        console.error("‚ùå Erro ao atualizar compra existente:", updateError);
      } else {
        console.log("‚úÖ Compra existente atualizada com sucesso");
      }
    } else {
      // Registrar a compra pendente
      console.log("üîî Registrando nova compra pendente");
      const { data: newPurchase, error: insertError } = await supabaseAdmin
        .from("purchases")
        .insert({
          user_id: userData.user.id,
          stripe_session_id: session.id,
          memory_title: memoryTitle,
          amount: 1990,
          status: "pendente"
        })
        .select()
        .single();
      
      if (insertError) {
        console.error("‚ùå Erro ao registrar compra pendente:", insertError);
      } else {
        console.log("‚úÖ Compra pendente registrada com sucesso:", newPurchase.id);
      }
    }

    // Retornar a URL da sess√£o para redirecionamento
    console.log("‚úÖ Retornando URL da sess√£o para redirecionamento");
    return new Response(
      JSON.stringify({ 
        url: session.url,
        sessionId: session.id,
        memoryId: memoryId,
        timestamp: new Date().toISOString()
      }),
      {
        headers: { ...corsHeaders, "Content-Type": "application/json" },
        status: 200,
      }
    );
  } catch (error) {
    console.error("‚ùå Erro ao criar sess√£o de pagamento:", error);
    console.error("‚ùå Stack trace:", error.stack);
    
    // Responder com erro detalhado
    return new Response(
      JSON.stringify({ 
        error: error.message,
        timestamp: new Date().toISOString(),
        details: error.stack
      }),
      {
        headers: { ...corsHeaders, "Content-Type": "application/json" },
        status: 500,
      }
    );
  }
});
